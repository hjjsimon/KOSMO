
[정규표현식] 

ex.이메일 입력, a@b.c 이런 패턴이 맞는지 확인하는게 정규표현식, 패턴에서 특정 데이터를 추출할 때도 씀

어떠한 문자열값이 특정한 패턴을 갖는지를 검사하기위한 표현식으로******
데이터를 검사하기 위해 이용된다.또한 특정 데이타들을 추출할때도 사용한다******
예를들어 숫자로 된 값만을 취하여야 할때라든지,
이메일 주소가 형식에 맞는지등을
검사하는데 정규표현식이 이용됨
JDK1.4부터 지원

[패턴을 표현하는 문자] ->이런 식을 써서 정규표현식 만듦, 잘 까먹음

. : 임의의 한글자를 의미 -> a()b -> 한 글자가 와야함, aAb 이러면 맞음, a4b 맞음
예) a.b(aab,acb,afb........) 
* : * 바로 앞의 문자가 없거나 한 개 이상이 있을 경우 -> a>=0 의미, b됨, a없으니까 맞음, a12b는 안됨
예) a*b (b,ab,aab,aaab....)
+ : +바로 앞의 문자가 최소 한개 이상일때 -> a>=1의미, 한개는 돼야함 그냥 b안됨
예) a+b (ab,aab,aaab...)
? : ?바로 앞의 문자가 없거나 한 개 존재하는 경우-> 0또는 1, aab 안됨
예) a?b (b,ab)
^ : ^ 뒤에 문자열과 같은 문자열로 시작하는 경우 즉 문자열의 시작을 의미 -> 문자열의 시작, 
    [ ]안에서 ^ 는 [ ]안의 문자를 제외한 문자를 의미
예) ^ab(ab,abc,abdr...) -> ^ab면 ab로 시작해야함, ab, abc abfdfd맞음, acb 안됨
$ : $앞의 문자열과 같은 문자열로 끝나는 경우 즉 문자열의 끝을 의미
예) .*ab$ (ab,avab,aab,abab...) -> *앞에 임의의 한글자 있으니까 됨, ab문자열로 끝나야함, 1ab됨, 1은 임의의한글자, 숫자라는 문자1개



[] : []안에 문자열중에 하나만의 문자만을 의미 -> 범위 중 한 문자, [a-z]면 A안됨, 3안됨
예) [a-z](a부터 z까지중 한 문자)
    [0-9](0부터 9까지 숫자중 한 문자)
 [abc](a혹은 b혹은 c)

{} :{}앞의 한 문자의 개수를 의미 문자{최소개수,최대개수} -> 문자열아니고 한 문자!
    최소개수는 반드시 있어야하고 최대개수가 없는 경우는 1개또는 1개이상을 의미
 하고 숫자 하나만을 적어 주엇을때는 그 숫자만큼의 개수를 의미한다.
예) abc{1,2} (abc,abcc) -> 1은 최소개수, 2는 최대개수, c가 최소1개, 최대2개, abc, abcc
    a{3} (aaa) -> aaa문자 정확히 3개 의미
 a{1,} (a,aa,aaa....) -> a최소개수1개, 최대개수 무한, 최소 a 1개만 넘으면됨

참고) *,+,?를 {} 로 표현해보면
* => {0,}
+ => {1,}
? => {0,1}

() : ()안의 문자는 그룹으로 인식한다.데이타 추출시 주로 사용한다.
예) a(bc){2} (abcbc) -> 위에 엮임, 앞에 묶인 문자를 한 문자로 취급

| : or 연산자
예) a(b|c)d  (abd,acd) -> 파이프라인이라함, 왼쪽 정규표현식, 중간에 b나 c가 되도록함

[^ ] : []안의 문자는 사용 못한다는 의미 ->not! 부정의미(대괄호 안의 ^일 때, not연산자)
예) [^abc] (a나 b나 혹은 c를 포함하지 않은 한 문자) -> d나 A나 가능, a b c 세개만 없으면 됨
    [^0-9] (0에서 9까지의 숫자를 포함하지 않은 한 문자)

\p{Alpha}:대/소문자 알파벳 한 문자를 의미
\p{Digit}:숫자 한 문자를 의미 -> [0-9]도 숫자 한문자, 이게 나음
\p{Alnum}:대/소문자 알파벳 혹은 숫자 한 문자를 의미 ->[A-Za-z0-9]와 동일

\r:캐리지리턴
\n:new line -> 줄바꿈
\t:일반 탭문자
\0:null문자
[\b]백스페이스
\s:공백문자 -> 많이 씀
\S:공백이 아닌 문자 -> 대문자는 not의미, 공백이 not
\w:알파벳문자,숫자,_[a-zA-Z0-9_] -> 대소문자 무관, 언더바_도 포함함, \p{Alnum}에 언더바 추가된 것 중 한 문자 뽑아오기
\W:알파벳문자,숫자,_가 아닌문자[^a-zA-Z0-9_] -> 대문자라 not!, 꺽쇄!

\d:정수[0-9]
\D:정수가 아닌 문자[^0-9]

예시)
abc{2,3}:ab뒤에 c가 최소 2개에서 최대 3개인 문자열인지
^a.{2}d$ :a와 d사이에 2개의 문자가 있는 문자열인지
^a|c$ : a로 시작하거나 혹은 c로 끝나는 문자열
a(bc){2,3}:a뒤에 bc가 최소 2개에서 최대 3개인 문자열인지
^[a-z][0-9]$ :a에서 z사이의 한문자로 시작하고 0에서 9사이의 한 숫자로 끝나는 문자열인지
^[a-z][0-9]:a에서 z사이의 한문자로 시작하고 0에서 9사이의 한 숫자로 끝나는 문자열인지
^[^a-z][^0-9]:a에서 z사이의 한문자로 시작하지 않고 0에서 9사이의 한 숫자로 끝나지 않는 문자열인지


[주요 정규식]

-핸드폰 번호
 "^[01][1][016789]\\d{3,4}\\d{4}$"

-> 0이나 1로 시작/ 1이 와야함/016789 중 한 문자/ 3자리~최대4자리, 자바정규표현식이라 이스케이프 안되도록 \\d에 \\ 2번 써줌/뒤에 숫자 4자리

-이메일

"\\p{Alnum}+@\\p{Alnum}+\\.\\p{Alnum}+"

-> +대신 {1,} 써도 됨, .은 .com의 .인데 \1개붙이면 이스케이프, 방지 \\ 2개 써줌


예제
-> 정규표현식(regular expression) -> regex.안에 Patter, Matcher 클래스 많이 씀

	import java.util.regex.Pattern;
	import java.util.regex.Matcher;

	public class MyPattern{
		
		public static void main(String[] args){
			//13자리 숫자만 
			Pattern p = Pattern.compile("^(\\d{13})"); // \d는 숫자, 이스케이프방지\\ -> 문자열로 넣은 정규표현식을 컴파일, Pattern타입의 객체를 만듦
			String str="1111112222222";
			Matcher m = p.matcher(str); //p.matcher 메소드, matcher객체 만듦,

			if(m.matches()){ //matcher객체의 matches 메소드, true면 패턴일치
				System.out.println("패턴 일치");
			}
			else{
				System.out.println("패턴 불일치");
			}
		

		}


	}
      