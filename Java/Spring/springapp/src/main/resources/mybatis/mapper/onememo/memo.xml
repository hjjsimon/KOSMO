<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<!-- namespace속성: 매퍼 인터페이스의 완전한 경로 .java는 생략 -->
<!-- ※ibatis와는 다르게 id값에 .(dot)를 사용 못한다. -->
<!--
	[쿼리문 작성법]
	1] 값에 해당하는 부분은 #{변수} <-키를 넣어주면 됨
	
	2] 객체(테이블명 혹은 컬럼명 등을 의미)에 해당하는 부분은 ${변수} 
	
	3] #{변수} 작성시 parameterType이 Map인 경우는 키값을
	     자바빈(DTO계열)인 경우는 자바빈의 속성명(멤버변수명) 이어야 한다
	     단,parameterType이 int나 String인 경우는 임의값을 줘도 무방
	     
	4] 쿼리문안에  >,>=,<,<=등의 비교 연산자를 사용하는 경우 에러
	  	방법1) <![CDATA[     ]]> CDATA섹션을 사용
	  	예]  SELECT * FROM emp
  		    <![CDATA[
  		    WHERE sal >= 3000
  		    ]]>
	  		CDATA섹션의 문자열은 단순 텍스트로 처리한다
	  		
	  	방법2) 특수문자를 사용한다 즉 >은 &gt; < 은 &lt;
	  	예] SELECT * FROM emp
	  	    WHERE sal &gt;= 3000
	 -->
<!-- 매퍼파일 -->  
<!-- 현재 .xml을 매퍼 파일 이라 함, mybatis.xml에서 복붙 -->
<!-- 매퍼(DAO대체) 만들고, 서비스 만들고, 컨틀롤러 만드는 순서로 진행함 https://cafe.naver.com/dctforall 그림 역순 참고-->
<mapper namespace="com.kosmo.springapp.onememo.service.impl.OneMemoMapper"><!-- 여기 인터페이스로 이동 -->
	
	<!--resultMap요소 사용시 column속성 필수:ibatis와 다른점  -->
	<!-- 
		 레코드를 조회하는 모든 select태그에서 사용할 수 있다
		 (resultXXX는 결과니까 당연히 select 태그에만 있는 속성)
		 상세보기에 적용: 글 번호에 따른 모든 한줄 댓글도 가져오기위해 collection요소 사용
		 type속성: DTO계열 즉 SELECT한 쿼리 결과를 담을 자바빈 객체
		 id속성: select 요소의 resultMap속성에 설정해줄 식별자
	-->
	<!-- 쿼리 조인 결과를 담을 ResultMap 요소 정의 -->
	<resultMap type="oneMemoDto" id="memoDtoResult"><!-- 별칭해준거 씀, 아니면 패키지부터 귀찮게 다 써야함 -->
		<!-- 
			property: 자바빈(OneMemoDTO.java)의 속성명
			column: 테이블의 컬럼(select 조회결과의 컬럼명 = 필드명들 의미)
		 -->
		<result property="no" column="no"/>
		<result property="title" column="title"/>
		<result property="content" column="content"/>
		<result property="postDate" column="postDate"/>
		<result property="id" column="id"/>
		<result property="name" column="name"/>
		<!-- 조인 쿼리시 반드시 commentCounts로 별칭하자, 원래 없는 컬럼, 설명 어쩌구 했는데 까먹 -->
 		<result property="commentCounts" column="commentCounts"/>		
 		<!--
			※ 1:N관계(부모-자식) 매핑용
			1) column: 조인조건의 컬럼명 (ON onememo.no = linecomments.no)
			2) select: select태그의 id 속성값(쿼리문은 조인문)
			3) javaType : OneMemo테이블의 자식레코드를 담는 컬렉션 타입(OneMemoDTO 참고, 이거 List씀-> List<LineCommentDTO> comments;)
			4) ofType : 자식의 DTO타입
			5) property: 댓글 목록을 담을 OneMemoDTO속성명
			
			아래 collection요소 사용시
			현재 매퍼파일에서 메모글 하나 가져올때 반드시 resultMap="memoDtoResult"을 사용하지
		-->
		<!-- select 속성은 comment.xml 참고 -->
 		<collection property="comments" column="no" 
	 		select="com.kosmo.springapp.onememo.service.impl.LineCommentMapper.findAllByNo" 
	 		javaType="List" ofType="commentDto"/>
		 <!-- onememo,comments 테이블 조인 결과 담을 요소임, 조인컬럼은 no, commentDto는 별칭(LineCommentDTO.java) -->
	</resultMap>
	
	<select id="findByIdAndPwd" parameterType="Map" resultType="boolean" >
	<!-- 0은 false, 0이상은 true 처리됨-->
		SELECT COUNT(*) FROM member WHERE id=#{id} AND pwd=#{pwd} 
	</select>
	
	<select id="findAll" parameterType="Map" resultType="oneMemoDto">
	<!-- OneMemoDTO에 쓴 변수 그대로 컬럼에서 가져와야함, commentCounts(별칭)는 댓글, 서브쿼리 사용 -->
	<!-- name 나오게 조인한 이유는 검색시 name으로도 하기 위함, onememo에는 없는 컬럼 -->
	<!-- 
		1]검색시 아래 코드만 추가, 자바코드 수정 불필요
			<where>
				<if test="searchWord != null">
					${searchColumn} LIKE '%' || #{searchWord} || '%'
				</if>
			</where>
		
		2]페이징시
		 	1) 구간쿼리로 변경
		 	2) 총 레코드수 구하는 쿼리(id="count"인거) 추가
		 	3) 서비스단에 페이징관련 로직 추가(컨트롤러에서는 호출만 하면 됨)
		 	4) JSP에서 출력
	 -->
	 	SELECT * FROM
		(SELECT T.*,ROWNUM R 
		FROM  (SELECT o.*,name ,(SELECT COUNT(*) FROM comments WHERE no=o.no) commentCounts
				FROM onememo o JOIN member m ON m.id=o.id
				<!-- where태그 아래 if조건 충족시 WHERE절 추가 -->
				<!-- 검색하면 searchWord, searchColumn이 파라미터로 넘어옴 -->
				<!-- #은 값, $는 객체명 -->
				<where>
					<if test="searchWord != null">
						${searchColumn} LIKE '%' || #{searchWord} || '%'
					</if>
				</where>
				ORDER BY no DESC) T)
		WHERE R BETWEEN #{start} AND #{end}
	</select>
	<!-- PaginUtil.java 보면 맨 위에 키값 start, end로 설정함 -->
	
	
	<!-- OneMemoMapper에서 count 확인 -->
	<select id="count" parameterType="Map" resultType="int">
		SELECT COUNT(*)
		FROM onememo o JOIN member m ON m.id=o.id
		<where>
			<if test="searchWord != null">
				${searchColumn} LIKE '%' || #{searchWord} || '%'
			</if>
		</where>
	</select>
	
	
	<insert id="save" parameterType="Map">
		INSERT INTO onememo VALUES(SEQ_ONEMEMO.NEXTVAL,#{title},#{content},SYSDATE,#{id})
	</insert>
	
	 <!-- 레코드 가져오는거니까 select -->
	 <!-- <resultMap type="oneMemoDto" id="memoDtoResult"> 위에 정의한거 id를 resultMap에 써줌! -->
	 <!-- no는 Map으로 넘어옴, 글번호에 따른 댓글수(commentCounts)는 제외하고 조회, 상세보기화면이니까, 여기선 댓글들을 직접 뿌려줄 예정 -->
	<select id="findByNo" parameterType="Map" resultMap="memoDtoResult">
	  	SELECT o.*,name 
		FROM onememo o JOIN member m ON m.id=o.id
		WHERE no=#{no}
	</select>
	<!-- 위 쿼리 실행되며 resultMap에 설정한 result태그의 값들 채움 -->  
	
	<delete id="deleteByNo" parameterType="oneMemoDto">
		DELETE onememo WHERE no=#{no}
	</delete>
	
	<update id="updateByNo" parameterType="oneMemoDto">
		UPDATE onememo SET title=#{title},content=#{content} WHERE no=#{no}
	</update>

	<!-- 스프링 씨큐리티용 -->
	<insert id="saveUser" parameterType="Map">
		INSERT INTO users VALUES(#{id},#{pass},#{name},SYSDATE,DEFAULT,DEFAULT)
	</insert>







</mapper>










