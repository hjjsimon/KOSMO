#내장 톰캣서버 포트 설정(디폴트: 8080) 주석처리는 샵, 타임리프 설정 안했지만 디폴트로 된것
#사용자가 localhost:9090뒤에 /~~ 패스 없이 요청시 이 요청을 디스패처 서블릿이 받음
#그리고 핸들러 매핑한테 루트요청 받은걸 어느 컨트롤러에 보낼지 물어봄, 얘가 HelloWorld컨트롤러에 보내야해 라고 함, 루트요청이 헬로우월드인건 핸들러매핑이 세팅함
#GetMappin("/") 하면 HelloWorld찾아감, model.attribute는 리퀘스트영역에 투데이 저장한거랑 똑같음, 그리고 return "index"; 는 포워드랑 동일
#####server.port=9090

#컨텍스트 루트 변경(디폴트: /) <- 루트 의미
#스프링 애플리케이션의 컨텍스트 경로를 /springapp로 설정
#컨텍스트 경로가 /springapp로 설정되면 애플리케이션은 http://도메인주소:포트번호/springapp 경로에서 접근할 수 있습니다.
#따라서 #server.servlet.context-path=/springapp는 스프링 애플리케이션을 /springapp 경로로 배포하고 액세스할 수 있도록 설정하는 것을 의미
#server.servlet.context-path=/springapp
#위 코드 주석처리 됐으므로 localhost:8080 만 치면 액세스됨

#정적 리소스의 URL패턴 매핑(=지정)(원래 ~~pattern=/**가 디폴트, 즉 static폴더가 루트다)
#아래 코드 진행시 /resources/로 시작하는 모든 요청경로에 대해 정적리소스 처리를 수행한다는 의미
#정적리소스 요청하면 classpath:/resources/ 디렉토리에서 해당 리소스를 찾아 제공함, 즉 이 디렉토리에 해당 파일이 있어야함
#정적 리소스는 서버측에서 동적으로 생성,처리되지 않는 HTML,CSS,JS,이미지 파일 등으로 웹페이지 구성시 서버에서 생성되는게 아니라 미리 저장돼있는 것을 의미
#index.jsp에서 img태그에서 url패턴쓸때 필수(당연히 디폴트 사용시 아래 1개 설정코드 필요 없음)
#ex)디폴트 사용시 static이 루트이므로 아래 url 앞에 /static/이 자동으로 붙음 
#	src/main/resources의 /static/images/thumbnail.jpg인 경우
#	<img src="/images/thumbnail.jpg"/> 하면 됨
#ex) 위에 컨텍스트 루트 /springapp 주석처리 안하면 src="/springapp/images/thumbnail.jpg" 하면됨
spring.mvc.static-path-pattern=/resources/**
#spring.web.resources.static-locations=classpath:/static/ 
#위에 디폴트값(생략가능), 정적자원의 실제 위치, resources 하위 static 의미
#결론: 실제 경로는 /static/ 인데 /resources/ 로 접근한다!

#템플릿뷰로 JSP 사용시 (뷰 리졸버의 접두사,접미사로 자동으로 붙음)
spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp

#SPRING CONFIG
#추가적인 .properties 파일 설정 - 프로젝트 재 시작시 FileNotFoundException오류 발생 방지용(clean하지 않아도 됨)
spring.config.name=database# config file name(default to 'application')
spring.config.location=file:/config/ # location of config file

#@Value어노테이션 테스트용 
nickname=KingOfKing

#아래 내용은 디폴트이거나 여기 설정시 에러발생, 유연성 이유로 자바코드로 개별 실시함
#서블릿 인코딩 설정-안해도 됨
#server.servlet.encoding.charset=utf-8
#server.servlet.encoding.enabled=true
#server.servlet.encoding.force=true

#데이터 베이스 연결 설정(1~3]하면 마이바티스 설정시 에러,즉 자바코드로 설정해야한다)
#1]pom.xml에 아래 추가
#<dependency>
#    <groupId>org.springframework.boot</groupId>
#    <artifactId>spring-boot-starter-jdbc</artifactId>
#</dependency>

#2]데이터베이스 연결을 위한 JDBC 설정
#https://docs.spring.io/spring-boot/docs/1.1.6.RELEASE/reference/html/common-application-properties.html
#아래 설정시 데이터 소스 등록됨, 스프링 컨테이너에 등록, 이후 datasource에 주입하는 것
#spring.datasource.driverClassName=oracle.jdbc.OracleDriver
#spring.datasource.url=jdbc:oracle:thin:@localhost:1521:xe
#spring.datasource.username=SPRING
#spring.datasource.password=SPRING

#3]히카리 커넥션 풀 사용 설정
#DatabaseConfig.java 참고, <-여기서 안해도 됨
#spring.datasource.hikari.auto-commit=true
#spring.datasource.hikari.connection-timeout=30000
#spring.datasource.hikari.maximum-pool-size=10

#파일 하나의  최대 업로드 크기(기본값은 1MB)
spring.servlet.multipart.max-file-size=2MB 
#다중파일 업로드시 파일용량 합계 최대 업로드 크기(기본값 10MB)
spring.servlet.multipart.max-request-size=15MB 	
#파일 업로드 위치
file.upload = /upload





