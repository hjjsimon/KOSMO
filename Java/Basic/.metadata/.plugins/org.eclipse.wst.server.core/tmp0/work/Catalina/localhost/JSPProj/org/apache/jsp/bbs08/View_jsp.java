/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.8
 * Generated at: 2023-06-22 09:17:59 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.bbs08;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import model.PagingUtil;
import model.JWTOkens;
import java.util.Map;
import model.bbs.BBSDto;
import model.bbs.BBSDao;

public final class View_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("model.JWTOkens");
    _jspx_imports_classes.add("model.bbs.BBSDao");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("model.bbs.BBSDto");
    _jspx_imports_classes.add("model.PagingUtil");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- 로그인 여부 판단:필터 사용시 아래 주석처리 -->\r\n");
      out.write('\r');
      out.write('\n');

	//1]파라미터(키값) 받기	
	String no = request.getParameter("no");
	//현재 페이지번호 받기
	String nowPage=request.getParameter(PagingUtil.NOWPAGE);
	
	//페이지사이즈 받기-삭제시 페이징처리용
	String pageSize=request.getParameter(PagingUtil.PAGE_SIZE);
	//검색과 관련된 파라미터 받기
	String searchColumn = request.getParameter("searchColumn");//검색항목
	String searchWord = request.getParameter("searchWord");//검색어
	String searchString="";//검색시 페이징 적용을 위한 쿼리스트링 저장용
	if(searchColumn != null && searchWord.length() !=0){		
		//검색시 적용된 페이징 번호 클릭시 처리하기 위한 추가 쿼리스트링
		searchString=String.format("searchColumn=%s&searchWord=%s", searchColumn,searchWord);
	}
	
	
	//2]CRUD작업용 BBSDao생성
	BBSDao dao = new BBSDao(application);
	
	//이전 페이지명 얻기:List.jsp에서 뷰로 올때만 조회수 증가 하기 위함
	String referer=request.getHeader("referer");
	//요청헤더명으로 요청헤더 가져옴 ex)http://localhost:8080/JSPProj/bbs08/List.jsp 출력
	//referer : http://localhost:8080/JSPProj/bbs08/List.jsp
	String prevPage = referer.substring(referer.lastIndexOf("/")+1);
	//레코드 하나 가져오기
	BBSDto dto= dao.selectOne(no,prevPage);//조회수 1증가, var...args라 여러인자 가능
	//이전글/다음글 조회
	Map<String,BBSDto> map= dao.prevNext(no);//글번호, 이전페이지명 넘겨줌
	dao.close();//연결끊기


      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/template/Top.jsp", out, false);
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("	function isDelete(){\r\n");
      out.write("		if(confirm(\"정말로 삭제하시겠습니까?\")){\r\n");
      out.write("			location.replace(\"Delete.jsp?no=");
      out.print(no+"&"+PagingUtil.NOWPAGE+"="+nowPage+"&"+searchString+PagingUtil.PAGE_SIZE+"="+pageSize);
      out.write("\");\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<div class=\"container\" style=\"margin-top: 50px\">\r\n");
      out.write("	<div class=\"jumbotron bg-info\">\r\n");
      out.write("		<h1>상세보기 페이지</h1>\r\n");
      out.write("	</div>\r\n");
      out.write("	<!--jumbotron-->\r\n");
      out.write("	<table class=\"table table-bordered\">\r\n");
      out.write("		<tbody class=\"table-sm\">\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th class=\"w-25 bg-dark text-white text-center\">번호</th>\r\n");
      out.write("				<td>");
      out.print(dto.getNo() );
      out.write("</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th class=\"w-25 bg-dark text-white text-center\">작성자</th>\r\n");
      out.write("				<td>");
      out.print(dto.getName() );
      out.write("</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th class=\"w-25 bg-dark text-white text-center\">작성일</th>\r\n");
      out.write("				<td>");
      out.print(dto.getPostDate() );
      out.write("</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th class=\"w-25 bg-dark text-white text-center\">조회수</th>\r\n");
      out.write("				<td>");
      out.print(dto.getHitCount() );
      out.write("</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th class=\"w-25 bg-dark text-white text-center\">제목</th>\r\n");
      out.write("				<td>");
      out.print(dto.getTitle() );
      out.write("</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th class=\"bg-dark text-white text-center\" colspan=\"2\">내 용</th>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td colspan=\"2\">");
      out.print(dto.getContent().replace("\r\n","<br/>") );
      out.write("</td>\r\n");
      out.write("				<!-- 게시판작성글의 엔터는 브라우저 표시중 스페이스 하나처리됨, 이를 줄바꿈으로 바꾸는 코드 -->\r\n");
      out.write("\r\n");
      out.write("			</tr>\r\n");
      out.write("		</tbody>\r\n");
      out.write("	</table>\r\n");
      out.write("	<!-- 이전글/다음글 -->\r\n");
      out.write("	<div>\r\n");
      out.write("		<table class=\"table\">\r\n");
      out.write("			<tbody>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td class=\"border-top-0 bg-info\" style=\"width: 7%\">이전글</td>\r\n");
      out.write("					<td class=\"border-top-0\">\r\n");
      out.write("					");
      out.print(map.get("PREV")==null?"이전글이 없습니다":String.format("<a href='View.jsp?no=%s'>%s</a>",map.get("PREV").getNo(),map.get("PREV").getTitle()) );
      out.write("\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td class=\"bg-info\">다음글</td>\r\n");
      out.write("					<td class=\"border-top-0\">\r\n");
      out.write("					");
      out.print(map.get("NEXT")==null?"다음글이 없습니다":String.format("<a href='View.jsp?no=%s'>%s</a>",map.get("NEXT").getNo(),map.get("NEXT").getTitle()) );
      out.write("\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("			</tbody>\r\n");
      out.write("		</table>\r\n");
      out.write("	</div>\r\n");
      out.write("	<!-- 수정/삭제/목록 컨트롤 버튼 -->\r\n");
      out.write("	<div class=\"text-center\">\r\n");
      out.write("		<!-- 세션기반 -->\r\n");
      out.write("		");
      out.write("\r\n");
      out.write("		<!-- 세션영역에서 읽어온 id와 작성자의 id를 비교해서 같으면 수정, 삭제 나오게함(게시판 토큰전용이라 테스트x) -->\r\n");
      out.write("		\r\n");
      out.write("		<!-- 토큰기반 -->\r\n");
      out.write("		");

			String token=JWTOkens.getToken(request, application.getInitParameter("COOKIE-NAME"));//web.xml에 쿠키네임 해놓음
			String authenticationId=JWTOkens.getTokenPayloads(token, "/resources/tokens","secret-key").get("sub").toString();
			//토큰으로 인증한 아이디
			if(authenticationId.equals(dto.getId())){
		
      out.write("\r\n");
      out.write("		<!-- 페이지 이동시 쿼리스트링으로 파라미터 잘 넘겨야 왔다갔다 이동이 용이해짐 -->\r\n");
      out.write("		<a href=\"Edit.jsp?no=");
      out.print(no+"&"+PagingUtil.NOWPAGE+"="+nowPage+"&"+searchString );
      out.write("\" class=\"btn btn-success\">수정</a> \r\n");
      out.write("		<!-- 쿼리스트링으로 no넘겨줘야 Edit에서 받음 -->\r\n");
      out.write("		<a href=\"javascript:isDelete();\" class=\"btn btn-success\">삭제</a> \r\n");
      out.write("		");
}
      out.write("\r\n");
      out.write("		<a href=\"List.jsp?");
      out.print(PagingUtil.NOWPAGE+"="+nowPage+"&"+searchString );
      out.write("\" class=\"btn btn-success\">목록</a>\r\n");
      out.write("	</div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<!--container-->\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/template/Footer.jsp", out, false);
      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
