/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.8
 * Generated at: 2023-05-25 08:14:20 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.session06;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class SessionIndex_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <!--  \r\n");
      out.write("    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css\">\r\n");
      out.write("    <script src=\"https://cdn.jsdelivr.net/npm/jquery@3.6.4/dist/jquery.slim.min.js\"></script>\r\n");
      out.write("    <script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js\"></script>\r\n");
      out.write("    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.bundle.min.js\"></script>\r\n");
      out.write("    -->\r\n");
      out.write("     <link rel=\"stylesheet\" href=\"");
      out.print(request.getContextPath() );
      out.write("/bootstrap/css/bootstrap.min.css\">\r\n");
      out.write("    <script src=\"");
      out.print(request.getContextPath() );
      out.write("/bootstrap/js/jquery.slim.min.js\"></script>\r\n");
      out.write("    <script src=\"");
      out.print(request.getContextPath() );
      out.write("/bootstrap/js/popper.min.js\"></script>\r\n");
      out.write("    <script src=\"");
      out.print(request.getContextPath() );
      out.write("/bootstrap/js/bootstrap.bundle.min.js\"></script>\r\n");
      out.write("    <script src=\"https://kit.fontawesome.com/0b4621b427.js\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("    <title>SessionIndex.jsp</title>\r\n");
      out.write("    <style>\r\n");
      out.write("        /*점보트론 세로폭 및 마진바툼 줄이기*/\r\n");
      out.write("        .jumbotron{\r\n");
      out.write("            padding-top:1rem;\r\n");
      out.write("            padding-bottom:1rem;            \r\n");
      out.write("            margin-bottom: .5rem;\r\n");
      out.write("            border-top-left-radius:0;\r\n");
      out.write("            border-top-right-radius:0;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<!-- 네비게이션 바  -->\r\n");
      out.write("	<!--상단 고정-->\r\n");
      out.write("	<nav class=\"navbar navbar-expand-sm bg-dark navbar-dark fixed-top\">   \r\n");
      out.write("      <!--Brand / Logo 표시-->      \r\n");
      out.write("      <a class=\"navbar-brand\" href=\"#\"><i class=\"fa-solid fa-house-chimney\"></i></a>\r\n");
      out.write("      <!-- Navbar text-->\r\n");
      out.write("      <span class=\"navbar-text\">\r\n");
      out.write("        모두를 위한 플랫폼\r\n");
      out.write("      </span>\r\n");
      out.write("      <!-- Toggler/collapsibe Button -->\r\n");
      out.write("      <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapsibleNavbar\">\r\n");
      out.write("        <span class=\"navbar-toggler-icon\"></span>\r\n");
      out.write("      </button>\r\n");
      out.write("      <div class=\"collapse navbar-collapse justify-content-end\" id=\"collapsibleNavbar\">\r\n");
      out.write("        <!-- Links -->\r\n");
      out.write("        <ul class=\"navbar-nav mr-3\"><!--mr-3은 Navbar text와의 여백용-->\r\n");
      out.write("          <li class=\"nav-item\">\r\n");
      out.write("            <a class=\"nav-link active\" href=\"#\">Link 1</a>\r\n");
      out.write("          </li>\r\n");
      out.write("          <li class=\"nav-item\">\r\n");
      out.write("            <a class=\"nav-link \" href=\"#\">Link 2</a>\r\n");
      out.write("          </li>\r\n");
      out.write("          <!--Navbar With Dropdown-->\r\n");
      out.write("          <!--하단고정일때는 dropdown을 dropup으로-->\r\n");
      out.write("          <li class=\"nav-item dropdown\">\r\n");
      out.write("            <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbardrop\" data-toggle=\"dropdown\">Link 3</a>\r\n");
      out.write("            <div class=\"dropdown-menu\">\r\n");
      out.write("              <a class=\"dropdown-item\" href=\"#\">SubLink 1</a>\r\n");
      out.write("              <a class=\"dropdown-item\" href=\"#\">SubLink 2</a>\r\n");
      out.write("              <a class=\"dropdown-item\" href=\"#\">SubLink 3</a>\r\n");
      out.write("            </div>\r\n");
      out.write("          </li>\r\n");
      out.write("          <li class=\"nav-item\">\r\n");
      out.write("            <form class=\"form-inline\" action=\"#\">\r\n");
      out.write("              <input class=\"form-control mr-sm-2\" type=\"text\" placeholder=\"검색어 입력\">\r\n");
      out.write("              <button class=\"btn btn-success\" type=\"submit\">검색</button>\r\n");
      out.write("            </form>\r\n");
      out.write("          </li>\r\n");
      out.write("        </ul>\r\n");
      out.write("      </div>\r\n");
      out.write("    </nav>\r\n");
      out.write("    <div class=\"container\" style=\"margin-top:50px\">\r\n");
      out.write("        <div class=\"jumbotron bg-info\">\r\n");
      out.write("            <h1>세션</h1>            \r\n");
      out.write("        </div><!--jumbotron-->\r\n");
      out.write("       	<!-- \r\n");
      out.write("       		세션이 삭제되는 경우?\r\n");
      out.write("       		1. 유효시간동안 서버에 아무런 요청을 보내지 않았을 때\r\n");
      out.write("       		2. 브라우저를 닫았을 때\r\n");
      out.write("       		-> 현재 브라우저 안에서 모든 JSP(서블릿)은 동일한 세션영역에 있다\r\n");
      out.write("       \r\n");
      out.write("       		세션도 클라이언트의 상태정보를 저장하기 위한 기술, 쿠키와 동일\r\n");
      out.write("       		쿠키는 클라이언트에 저장, 세션은 서버에 저장되어 안전\r\n");
      out.write("       		그러나 세션도 내부적으로 쿠키 사용함\r\n");
      out.write("       		세션도 쿠키처럼 요청, 응답 1회시 세션 끊어짐\r\n");
      out.write("       		요청시 내부적으로는 서버에서 쿠키를 만듦, 요청에 관한 request객체 만들어짐\r\n");
      out.write("       		그리고 session객체 1개 만들어지고 서버에 저장(request, application도 다 서버에 저장)\r\n");
      out.write("       		session마다 유니크한 ID값이 있음, 브라우저 1개당 1개 생김\r\n");
      out.write("       		사용자가 브라우저 열어 내 플랫폼(서버) 접속시 session객체 만들어짐\r\n");
      out.write("       		JSESSIONID 이걸로 쿠키를 만듦\r\n");
      out.write("       		다시 요청시 제이세션을 서버로 보내는 것, 요청헤더에 나옴, 서버가 아 또 요청 보냈구나 인지함\r\n");
      out.write("       		page<request<session<application영역\r\n");
      out.write("       		request보다 수명이 긺\r\n");
      out.write("       		목록페이지 -> 상세페이지 넘어가면 페이지 다 다름, 그래도 1개 브라우저 내에서 바뀌는거라 session영역은 1개\r\n");
      out.write("       		브라우저 닫으면 당연히 session종료됨, 서버에서 사라짐\r\n");
      out.write("       		\r\n");
      out.write("       		네이버 접속시 브라우저 유지하면 같은 세션객체라 유지, 계속 브라우징 하면서 페이지 넘어가도 유지\r\n");
      out.write("       		페이지 넘어가며 요청할 때마다 30분씩 연장이됨, 근데 켜놓고 요청없이 가만히 있으면 30분 후 세션객체 삭제(접속끊긴걸로 간주)\r\n");
      out.write("       		이후 요청시 새로운 세션객체가 만들어짐\r\n");
      out.write("       		ex.세션 끊어져서 로그인 날아갈 수 있음 \r\n");
      out.write("       		\r\n");
      out.write("       		최근에는 세션인증 보다 토큰기반인증을 많이 씀\r\n");
      out.write("       		세션객체가 서버에 저장, 노드밸런스가 앞쪽에 있대, 많이 부하 걸리는 서버가 있으면 안되니까 여기저기 뿌리게 조절해줌\r\n");
      out.write("       		근데 다른 서버에는 세션객체가 없으니까 로그인 안된걸로 알고있으니 로그인을 또 해야함(단점)\r\n");
      out.write("       		컴퓨터는 선으로 연결, 모바일은 무선, 그래서 세션이 할당되더라도 자주 끊김\r\n");
      out.write("       		토큰은 그냥 문자열임, 서버와 상태를 계속 유지할 필요가 없음\r\n");
      out.write("       		세션으로 상태를 유지할 필요 없이, 서버는 쿠키처럼 토큰을 발행하고, 토큰 받고.. 여튼 주고받는다~  \r\n");
      out.write("       		       		\r\n");
      out.write("       		\r\n");
      out.write("       	-->\r\n");
      out.write("        <fieldset class=\"form-group border p-3\">\r\n");
      out.write("        	<legend class=\"w-auto px-3\">session(HttpSession)내장 객체의 주요 메소드</legend>\r\n");
      out.write("        	<ul class=\"list-unstyled\">\r\n");
      out.write("        		<li>세션의 유효시간(Servers폴더의 web.xml:분단위) : ");
      out.print(session.getMaxInactiveInterval()/60 );
      out.write("분</li>\r\n");
      out.write("        		<!-- 초단위로 반환, 60나눠서 분으로 바꾸기, 30분 출력 -->\r\n");
      out.write("        		<!-- Server의 web.xml값을 현재 프로젝트 WEB-INF의 web.xml에서 오버라이딩, 30분->1440분 -->\r\n");
      out.write("        		");
      out.write("<!-- 이건 또 초단위임,설정바꾼게 아니고 자바코드로 바꾼것 -->\r\n");
      out.write("        		\r\n");
      out.write("				<li>세션 아이디: <a href=\"SessionResult.jsp\">");
      out.print(session.getId() );
      out.write("</a></li>	\r\n");
      out.write("				<!-- result에서 getId()해도 같은 브라우저이므로 같은 세션아이디 출력됨 -->\r\n");
      out.write("			</ul>\r\n");
      out.write("        </fieldset>        \r\n");
      out.write("        <!-- 세션 및 리퀘스트 영역에 속성 저장 -->\r\n");
      out.write("        ");

	        request.setAttribute("requestScope", "리퀘스트 영역입니다");//리퀘스트 영역에 저장
	        //이건 페이지 부르자마자 응답되므로, 저장해봤자 의미가 없음, 리절트로 넘어가면 새로운 요청,응답 끝남, requestScope로 저장한거 없으니 null
	        session.setAttribute("sessionScope", "세션 영역입니다");//세션 영역에 저장
        
      out.write("\r\n");
      out.write("        \r\n");
      out.write("        \r\n");
      out.write("    </div><!--container-->\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
