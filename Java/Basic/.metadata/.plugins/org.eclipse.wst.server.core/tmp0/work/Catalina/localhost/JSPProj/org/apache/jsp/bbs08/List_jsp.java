/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.8
 * Generated at: 2023-06-14 11:31:38 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.bbs08;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import model.PagingUtil;
import java.util.Map;
import java.util.HashMap;
import model.bbs.BBSDto;
import java.util.List;
import model.bbs.BBSDao;

public final class List_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("model.bbs.BBSDao");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("model.bbs.BBSDto");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("model.PagingUtil");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- 로그인 여부 판단:필터(로그인 했는지 검증해서 걸러버림) 사용시 아래 주석처리 -->\r\n");
      out.write('\r');
      out.write('\n');
	
	//JSP 모델1 방식, 모델2 방식 존재(그림교안확인)
	//모델1 방식(소규모 프로젝트용): JSP는 HTML을 생성하는 템플릿, JSP + 자바코드 구성(JSP가 요청받아(자바코드 섞일수밖에 없음) 파라미터 받고 처리함)
						//유지보수가 어려움, 개발생산성이 높다(1달 걸릴거 1주일)
	//모델2 방식(대규모 프로젝트용): 자바코드가 없음, 서블릿으로 작성하여(JSP가 요청받지않음, 별도의 서블릿이 요청받음, JSP는 결과만 출력함(이 때 쓰는게 EL, JSTL 언어))
						//서블릿에서 request영역에 저장 후 JSP로 포워딩시킴
						//유지보수가 쉬움, 개발생산성이 낮다(1주일 걸릴거 1달)

	//시작 및 끝 행번호(페이징관련) 와 검색 관련 데이타 저장용
	Map map = new HashMap();
	//검색과 관련된 파라미터 받기
	//검색UI의 form태그 action값없으므로 현재페이지로 전송, 여기서 파라미터 받아야함
	String searchColumn = request.getParameter("searchColumn");//검색항목
	String searchWord = request.getParameter("searchWord");//검색어
	String searchString="";//검색시 페이징 적용을 위한 쿼리스트링 저장용
	if(searchColumn != null && searchWord.length() !=0){
		map.put("searchWord",searchWord);
		map.put("searchColumn",searchColumn);
		//검색시 적용된 페이징 번호 클릭시 처리하기 위한 추가 쿼리스트링
		searchString=String.format("searchColumn=%s&searchWord=%s", searchColumn,searchWord);
	}
	

	//전체 글 목록 가져오기
	BBSDao dao = new BBSDao(application);
	
	//페이징을 위한 로직 시작
	//[제너릭 메소드 미 사용]
	/*
	//전체 레코드수
	int totalRecordCount = dao.getTotalRecordCount(map);
	//페이지 사이즈
	int pageSize=Integer.parseInt(this.getInitParameter("PAGE-SIZE"));//한페이지에 3개씩(web.xml에서 초기화파라미터 써서 2개로 바꿈)
	//블락 페이지
	int blockPage=Integer.parseInt(this.getInitParameter("BLOCK-PAGE"));//하단에 2페이지씩 보여줌(web.xml에서 초기화파라미터 써서 3개로 바꿈)
	//현재 페이지 번호
	int nowPage = request.getParameter(PagingUtil.NOWPAGE)==null ? 1 : Integer.parseInt(request.getParameter(PagingUtil.NOWPAGE));
	//시작 및 끝 ROWNUM구하기(구간쿼리용)
	int start = (nowPage -1)*pageSize+1;
	int end = nowPage*pageSize;	
	//페이징을 위한 로직 끝
	map.put(PagingUtil.START,start);
	map.put(PagingUtil.END,end);
	*/
	//[제너릭 메소드 사용]//이걸로 map 세팅, 검색안하면 map 비어있음
	PagingUtil.setMapForPaging(map, dao, request, this);
	int totalRecordCount=Integer.parseInt(map.get(PagingUtil.TOTAL_RECORD_COUNT).toString());
	int pageSize=Integer.parseInt(map.get(PagingUtil.PAGE_SIZE).toString());
	int blockPage=Integer.parseInt(map.get(PagingUtil.BLOCK_PAGE).toString());
	int nowPage=Integer.parseInt(map.get(PagingUtil.NOWPAGE).toString());
	List<BBSDto> artices= dao.selectList(map);
	dao.close();
	System.out.println("목록 요청작업 완료");

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/template/Top.jsp", out, false);
      out.write("\r\n");
      out.write("<div class=\"container\" style=\"margin-top: 50px\">\r\n");
      out.write("	<div class=\"jumbotron bg-info\">\r\n");
      out.write("		<h1>\r\n");
      out.write("			목록 페이지 <small>(");
      out.print(nowPage );
      out.write('/');
      out.print(map.get(PagingUtil.TOTAL_PAGE) );
      out.write(")</small>\r\n");
      out.write("		</h1>\r\n");
      out.write("	</div>\r\n");
      out.write("	<!--jumbotron-->\r\n");
      out.write("	<div class=\"text-right mb-2\">\r\n");
      out.write("		<a href=\"Write.jsp\" class=\"btn btn-danger\">글등록</a>\r\n");
      out.write("	</div>\r\n");
      out.write("	<table class=\"table table-dark table-hover text-center\">\r\n");
      out.write("		<thead>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th class=\"col-1\">번호</th>\r\n");
      out.write("				<th>제목</th>\r\n");
      out.write("				<th class=\"col-2\">작성자</th>\r\n");
      out.write("				<th class=\"col-1\">조회수</th>\r\n");
      out.write("				<th class=\"col-2\">작성일</th>\r\n");
      out.write("			</tr>\r\n");
      out.write("		</thead>\r\n");
      out.write("		<tbody class=\"table-sm\">\r\n");
      out.write("			");
 if(artices.isEmpty()){ 
      out.write("\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td colspan=\"5\">등록된 글이 없습니다.</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			");
}else{
					int loopCount=0;
					for(BBSDto article:artices){
						
				
      out.write("\r\n");
      out.write("\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td>");
      out.print(totalRecordCount - (((nowPage - 1) * pageSize) + loopCount) );
      out.write("</td>\r\n");
      out.write("				<td class=\"text-left\"><a href=\"View.jsp?no=");
      out.print(article.getNo() );
      out.write('&');
      out.print(PagingUtil.NOWPAGE+"="+nowPage+"&"+searchString+"&"+PagingUtil.PAGE_SIZE+"="+pageSize );
      out.write('"');
      out.write('>');
      out.print(article.getTitle() );
      out.write("</a></td>\r\n");
      out.write("				<!-- no와 nowpage번호를 넘김 -->\r\n");
      out.write("				<td>");
      out.print(article.getName() );
      out.write("</td>\r\n");
      out.write("				<td>");
      out.print(article.getHitCount() );
      out.write("</td>\r\n");
      out.write("				<td>");
      out.print(article.getPostDate() );
      out.write("</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			\r\n");
      out.write("			");
		loopCount++;
			
					}} 
      out.write("\r\n");
      out.write("\r\n");
      out.write("		</tbody>\r\n");
      out.write("	</table>\r\n");
      out.write("	<!-- 페이징 출력 -->\r\n");
      out.write("	");
      out.print(PagingUtil.pagingBootStrapStyle(totalRecordCount, pageSize, blockPage, nowPage, request.getContextPath()+"/bbs08/List.jsp?"+searchString+"&") );
      out.write("\r\n");
      out.write("	<!-- 검색 UI -->\r\n");
      out.write("	<form class=\"form-inline justify-content-center\" method=\"post\"><!-- action없으므로 현재페이지로 action(기본값) -->\r\n");
      out.write("		<select class=\"form-control\" name=\"searchColumn\">\r\n");
      out.write("			<option value=\"title\">제목</option>\r\n");
      out.write("			<option value=\"content\">내용</option>\r\n");
      out.write("			<option value=\"name\">작성자</option>\r\n");
      out.write("		</select> \r\n");
      out.write("		<input type=\"text\" class=\"form-control mx-2 my-2\"\r\n");
      out.write("			placeholder=\"검색어를 입력하세요\" name=\"searchWord\" />\r\n");
      out.write("		<button type=\"submit\" class=\"btn btn-primary\">검색</button>\r\n");
      out.write("	</form>\r\n");
      out.write("	\r\n");
      out.write("</div>\r\n");
      out.write("<!--container-->\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/template/Footer.jsp", out, false);
      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
