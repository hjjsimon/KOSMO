/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.8
 * Generated at: 2023-05-26 01:14:09 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.Map;
import java.util.HashMap;
import model.JWTOkens;
import model.bbs.BBSDao;
import java.util.Date;
import java.text.SimpleDateFormat;

public final class HelloWorld_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  public java.lang.String getServletInfo() {
    return "이 페이지는 JSP 및 서블릿 테스트 문서입니다";
  }

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("model.JWTOkens");
    _jspx_imports_classes.add("model.bbs.BBSDao");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("java.util.HashMap");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- 지시어라고함 -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	//스크립팅원소 라고함, 여기 자바코드 쓰면 됨s
	SimpleDateFormat dateFormat=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	String dateString=String.format("<kbd>%s</kbd>", dateFormat.format(new Date())) ;
	
	//DB 연결확인
	//BBSDao dao = new BBSDao(application);
	//dao.close();
	
	//Map<String,Object> payloads = new HashMap<>();//사용자 임의 데이터 추가
	//long expirationTime = 1000*60*60;//토큰만료시간 설정(1시간)
	
	//String token = JWTokens.createJWToken("KIM", "/resources/tokens", "sercret-key", payloads, expirationTime);
	
	

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css\">\r\n");
      out.write("    <script src=\"https://cdn.jsdelivr.net/npm/jquery@3.6.4/dist/jquery.slim.min.js\"></script>\r\n");
      out.write("    <script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js\"></script>\r\n");
      out.write("    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.bundle.min.js\"></script>\r\n");
      out.write("    <title>HelloWorld.jsp</title>\r\n");
      out.write("    <style>\r\n");
      out.write("        /*점보트론 세로폭 및 마진바텀 줄이기*/\r\n");
      out.write("        .jumbotron{\r\n");
      out.write("            padding-top: 1rem;\r\n");
      out.write("            padding-bottom: 1rem;\r\n");
      out.write("            margin-bottom: .5rem;\r\n");
      out.write("            border-top-left-radius: 0;\r\n");
      out.write("            border-top-right-radius: 0;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("        <div class=\"jumbotron bg-info\">\r\n");
      out.write("            <h1>JSP 및 Servlet 테스트(허재준)");
      out.write("</h1>\r\n");
      out.write("            <!-- C:\\Users\\kosmo>ipconfig /all 해서 내 ip주소 찾고\r\n");
      out.write("            		localhost 대신 넣으면 다른 사람에게 서비스 가능 \r\n");
      out.write("            		jsp는 Server Side Script Language -> SSSL\r\n");
      out.write("            		서버측에서 해석하는 언어, 브라우저는 해석X, html만 해석가능-->\r\n");
      out.write("        </div><!--jumbotron-->\r\n");
      out.write("        <fieldset class=\"form-group border p-3\">\r\n");
      out.write("        	<legend class=\"w-auto px-3\">JSP 테스트</legend>\r\n");
      out.write("        	<h3>오늘은 ");
      out.print( dateString );
      out.write(" 입니다</h3>\r\n");
      out.write("        </fieldset>\r\n");
      out.write("        <!-- 값, 연산자를 서버로 보내서 계산할 예정 -->\r\n");
      out.write("        <fieldset class=\"form-group border p-3\">\r\n");
      out.write("	    	<legend class=\"w-auto px-3\">Servlet테스트</legend>\r\n");
      out.write("	    	<a href=\"HelloServlet.do\" class=\"btn btn-primary\">HELLO SERVLET</a>			\r\n");
      out.write("			<span class=\"font-weight-bold text-danger\" style=\"font-size:1.2em\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${message}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</span>\r\n");
      out.write("			<!-- \r\n");
      out.write("				HelloServlet 가보면 message있음, request영역에서 읽어오는 내장객체인 requestScope가 EL의 앞부분 생략된것,\r\n");
      out.write("				pageScope부터 읽고, 없으면 requestScope로 넘어가서 찾아옴\r\n");
      out.write("			 -->\r\n");
      out.write("			<h2>계산기</h2>\r\n");
      out.write("			<form action=\"Calculator.kosmo\" >\r\n");
      out.write("				<div class=\"form-group\">\r\n");
      out.write("					<input type=\"number\" class=\"form-control form-control-sm w-50\" name=\"firstNum\"  />\r\n");
      out.write("				</div>\r\n");
      out.write("				<div class=\"form-group\">\r\n");
      out.write("					<select	name=\"operator\" class=\"form-control form-control-sm w-50\">\r\n");
      out.write("						<option value=\"+\">더하기</option>\r\n");
      out.write("						<option value=\"-\">빼기</option>\r\n");
      out.write("						<option value=\"*\">곱하기</option>\r\n");
      out.write("						<option value=\"/\">나누기</option>\r\n");
      out.write("					</select>\r\n");
      out.write("				</div>\r\n");
      out.write("				<div class=\"form-group\">\r\n");
      out.write("					<input class=\"form-control form-control-sm w-50\" type=\"number\" name=\"secondNum\"/>\r\n");
      out.write("				</div>\r\n");
      out.write("				<input class=\"btn btn-success\"	type=\"submit\" value=\"결과는\" />\r\n");
      out.write("				<span class=\"font-weight-bold text-danger\" style=\"font-size:1.4em\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${result}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</span>\r\n");
      out.write("			</form>\r\n");
      out.write("	    </fieldset>\r\n");
      out.write("        \r\n");
      out.write("    </div><!--container-->\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
