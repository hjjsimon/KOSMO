[입출력 스트림]

	1]스트림 : 일련의 연속 된 데이터의 흐름
	           입력 스트림:데이터 소스에서 프로그램에 흘러 들어오는 스트림
		   출력 스트림: 프로그램에서 데이터 목적지로 나가는 스트림


	2] Data source:	데이터의 근원(소스)-File, Keyboard, 원격 컴퓨터의 데이타등 
	
	3] Data Destination: 데이터가 최종적으로 도착하는 곳.-파일, 모니터, 프린터, 메모리:


	
	* 데이터 소스와 프로그램과 노드연결을 해야 함 이때 
	  노드 연결이 되면 입력 스트림을 통해 프로그램으로 데이터가 입력 됨
	  
	  또한 출력하기 위해서는 데이터 목적지와 프로그램이 
	  노드 연결을 해야 함 역시 이때는 출력스트림을 통해 
	  데이터 목적지로 데이터가 보내짐

		  입력 스트림               출력스트림
	  키보드 o===========o 프로그램 o==============o모니터
	  데이타 소스                                   데이타목적지
	
	         o:node

	
	예] System 클래스의 InputStream 멤버 변수-> in
			"			PrintStream 멤버 변수-> out/err

	4] 스트림의 특징

		-FIFO(Fisrt In First Out)구조
		-단방향(읽는 스트림/쓰는 스트림 엄격히 구분) 즉 입출력을 동시에 지원하진 
		 않는다
		-스트림에 들어간 데이터가 처리되기 전에는 스트림을 사용하는 스레드는 
		 블럭킹에 빠진다.
			(예: 키보드 입력시 입력할때까지 블락킹 됨)


	5] 스트림의 구분
		
		 1.스트림과 관련된 바이트 기반의 추상 클리스:InputStream 및 OutputStream
						   문자 기반의 추상 클래스:Reader/Writer


		2. 스트림에서 다루는 데이터 형태에 따른 구분
			
			-바이트 스트림(1바이트 단위로 데이터가 이동)
			...>XXXOutputStream/XXXInputStream 
			
			-문자 스트림(2바이트 단위로 데이터가 이동)
			...>XXXWriter/XXXReader 

		3. 데이터 소스/목적지와의 연결 가능성에 따른 분류

			 -Node Stream : 노드 스트림만이 데이터 소스/목적지에 직접 연결이 가능하다.	

							예]
							   파일과 노드 연결을 하는 노드 스트림:
									바이트 기반:FileInputStream/FileOutputStream
									문자 기반:FileReader/FileWriter
							   키보드 및 모니터와 노드연결을 하는 노드 스트림:System.in/System.out
						
			-Filter Stream: 
							 -필터 스트림은 데이터 소스나 데이터 목적지에 
							  직접 연결은 불가능하다.

							 -데이터 소스에 직접 연결한 노드 스트림을 통해 들어오는 데이터를 필터링(가공)하는

							   역할을 하는 스트림이다. 따라서 항상 노드 스트림과 연결해서 써야 함.
							 
							 -필터스트림 게열은 FilterXXXStream을 상속 받고 있다.
							 
							 -필터 스트림을 노드 스트림과 연결하는 방법

									노드 스트림 개체 생성후 노드 스트림 개체를	 
									필터 스트림의 생성자의 인자로 넣어주면 연결 됨

							 -필터 스트림을 이용하면 데이터 입출력에 있어서 속도 측면이나 
							  필터 스트림이
							  제공해주는 편리한 메서드등을 이용함으로써 효율성을 도모 할 수 있다.

							 예]
								바이트 기반의 필터 스트림:DataInputStream/DataOutputStream
											  BufferedInputStream/BufferedOutputStream


								문자 기반의 필터 스트림: BufferedReader / BufferedWriter
												 PrintWriter


		 4.Bridge역할을 수행하는 문자 기반의 스트림: 

					바이트 스트림을 문자 스트림로 변환해주는 스트림										
					예] 텍스트 파일에서 읽은 문자 스트림을 콘솔에 출력하면
					    즉 System.out스트림(PrintStream)을 이용하면 한글등이 깨진다. 
					    이를 2바이트 단위로 변환해 주는 스트림이 브릿지 스트림이다.													 

								InputStreamReader/ OutputStreamWriter


	


	6] 주요 스트림 클래스

		1.바이트 스트림


			노드 스트림]

				System.in : InputStream 타입
						   -바이트 기반의 입력 스트림
						   -키보드와 노드 연결하는 스트림
						   -read()메서드 : 카보드 입력을 받는 메서드,
						    입력스트림에서 한 바이트씩 읽어 온다
						   -read()메서드는 입력을 받을때까지 블락 상태가 됨.
							종료하려면(Ctrl+C(콘솔)Ctrl+z(이클립스))를 누르면 된다.
							이때 read()메서드는  -1을 리턴 함
							-System.in.close():노드 연결후에는 
							                   노드연결을 끊어 줘야 한다
							-System.out.close()

				System.out:PrintStream타입(OutputStream>FilterOutputStream으로 부터 
				                   상속 받은 클래스)
						  -바이트 기반의 출력 스트림
						  -시스템의 표준 출력장치와 노드 열결
						  -print()계열 메서드 및 write()메서드
						   print()계열:출력 스트림에 있는 값을
						             한바이트씩 출력(아스키->아스키). 
							     또한 한 바이트씩 flush된다
						   write()계열:출력 스트림에 있는 값을 입력한 
						               문자 그대로 출력(아스키->문자) 
							       엔터값은 엔처처리(줄바꿈)
							       또한 이메서드는 자동으로 flush가 
							       안되기 때문에
							       flush메서드로  flush
							       (메모리 버퍼(출력 스트림)에 있는 값을
									   내보내는 일)
							     를 해줘야 바로 바로 출력결과를 확인 할 수 있다


				FileInputStream : 
							- 파일의 내용을 읽는 바이트 기반의 노드 스트림
							- read():파일의 끝일 경우 -1을 반환
							- 지정된 파일이 없는 경우 
							  FileNotFoundException 발생
							- 노드연결 방법
							  생성자에 파일경로를 넣어주면 파일과 
							   노드열결이 이루어짐
							  FileInputStream fis= 
							  new FileInputStream("파일경로");			
							 -출력시 아스키 코드로 출력 됨
							  (write() 메서드로 출력하면 파일 내용 그대로 출력 됨)

				FileOutputStream :
							 -파일로 내용을 출력하는 바이트 기반의 노드 스트림
							 -write():내용을 파일로 출력하는 메서드
							  (write(int b) / write(byte[] b, int off, int len) )
							 -노드 연력방법
							 생성자에 파일경로를 인자로 넣어주면 파일과 노드연결이 됨
							 -지정한 파일이 없는 경우 새롭게 파일을 생성한다.
							 FileOutputStream(String name) :
							 기존 파일 내용 없어지고 새롭게 추가
							 FileOutputStream(String name, boolean append) :
							                                 파일의 끝에 내용 추가 


			필터 스트림]

				BufferedInputStream :
							-바이트 기반의 입력 스트림을 필터링 하는 필터 스트림
							-바이트 단위로 들어오는 데이터를 
							 버퍼에 모아서 버퍼가 가득차면 한꺼번에
							 읽어 들이는 필터 스트림(기본 버퍼 크기:512바이트)


				BufferedOutputStream :
							-바이트 기반의 출력 스트림을 필터링 하는 필터 스트림
							-바이트 단위로 내보내는 데이터를 버퍼에 모아서 버퍼가 가득차면 한꺼번에
							 출력 필터 스트림(기본 버퍼 크기:512바이트)


							*상기 필터 스트림을 거치면 버퍼에 담아서 읽고 쓰기 
							 때문에 속도가 빠르다.

				DataInputStream :
							-바이트 기반의 입력 스트림을 필터링 하는 필터 스트림
							 자바의 Data Type을 복호화(Decoding)하는 필터 스트림
							-available()(FilterInputStream클래스의 메서드)로 
							 읽어 올 수 있는 바이트수를 알아 낼 수 있다.


				DataOutputStream : 

							-바이트 기반의 출력 스트림을 필터링 하는 필터 스트림
							 자바의 Data Type을 암호화(Encoding)하는 필터 스트림
							-size()란 메서드로  출력한 데이타의
                                                         총 바이트를 얻어 올 수 있다.

							※DataOutputStream으로 출력한 데이타는 반드시 
							  DataInputStream으로 읽어야 원래대로 읽어 올수 있다
							 
							DataInputStream/DataOutputStream 의 주요 특징]

							-Data계열 필터 스트림은 
							 DataInput/DataOutput 인터페이스를 구현하고 있다.
							 DataInput/DataOutput 인터페이스는 자바의 자료형과 매핑되는 다양한
							 read 와 write계열의 메서드를 가지고 있다 

								예]
								boolean readBoolean() 
								:Reads one input byte and returns true if that byte is nonzero, false if that byte is zero
								
								Char readChar() 
								See the general contract of the readChar method of DataInput. 

								String readUTF() 
								See the general contract of the readUTF method of DataInput. 

								void writeBoolean(boolean v) 
								Writes a boolean to the underlying output stream as a 1-byte value
							
								void writeChar(int v) 
								Writes a char to the underlying output stream as a 2-byte value, high byte first. 

								void writeUTF(String str) 
								Writes a string to the underlying output stream using modified UTF-8 encoding in a machine-independent manner. 

				
							 -write계열 메서드들은 자료형들을 바이트 단위로 분해해서 
							  인코딩 해서 출력을 하고 read()계열 메서드들은
							  역시 자료형별 바이트 단위로 디코딩해서 읽어 들인다.



							-readUTF() 와  writeUTF(String str)메서드를 제공해서 
							 각 나라의 언어에 맞게
							 UTF형식으로 표현해서 문자열을 읽거나 출력해준다

							- 소켓 프로그래밍에서 채팅의 경우 readUTF()와 
							  writeUTF()메서드를 주로 사용 함


				ObjectInputStream/ObjectOutputStream:
				
				-바이트 기반의 입출력 스트림으로 개체를 입출력하는데 
				 사용되는 필터 스트림.
				-개체를 네트웍을 통해서 전송하거나 파일로 저장하고자 
				 할 때 사용
				 저장될 개체는 반드시 java.io.Serializable 나 혹은 
				  java.io.Externalizable 를 구현하고 있어야 한다.
				 즉 직렬화가 되야 네트웍을 통해 전송되거나 파일로 
				  저장될 수 있는 자격을 갖추게 된다.

				-클래스를 직렬화 하고자 할때는 java.io.Serializable 나 혹은 
				 java.io.Externalizable 를 import 하고
				 Serializable 나 혹은 Externalizable 인터페이스를 implements해야 한다.
				 단,Externalizable인터 페이스는 readExternal(ObjectInput in) 
				 와 writeExternal(ObjectOutput out)를
				 오버라이딩 해야 한다.

				
				*ObjectInput/ObjectOutput 인터페이스을 구현하고 있어
				 writeObject()나 readbject()메서드를 이용해 개체를 
				 저장 할 수 있음.

					
		2. 문자 스트림

			
			노드 스트림]

				FileReader :
					-문자 기반의 입력 스트림을 위한 노드 스트림 클래스 


				FileWriter
					-문자 기반의 출력 스트림을 위한 노드 스트림 클래스

				*상기 두 클래스는 파일 카피에 주로 많이 사용한다.

				*배열로 데이타를 읽어 들일때
				read(char[] cbuf,int offset,int len)을 사용


			필터 스트림]

				BufferedReader :

					-문자 입력 스트림을 위한 필터 스트림
					-라인 단위로 읽어 들일 수 있는 readLine()메서드 제공
					(단,엔터값은 읽지 않는다-출력시에는 \n을 추가해 주어야 함)******
					-String 클래스의 다양한 메서드 이용으로 간단하게 문자열 처리 가능
					

				BufferedWriter :

					- 문자 출력 스트림을 위한 필터 스트림
                                        - readLine()메서드가 엔터값을 읽지 않음므로  
					\n(엔터)를 출력할 수 있는 메서드 newLine()를 제공

                                        - String readLine()으로 읽은 문자열을 출력할 수 있는 
					  write(String str)메서드등을 제공한다.*****

					write(String str)는 Writer에서 상속 받은 메서드 임.


				*라인 단위로 읽고 라인단위로 출력할 수 있다.
				*노드 스크림과 바로 연결을 할 수 없다. 
				 그래서 브릿지 스트림을 통해서 연결한다(
				 FileRaeder나 FileWriter는 노드 스트림이나
                                 브릿지 스트림인 
				 InputStreamreader나 
				 OutputStreamWrite를 상속받아기때문에 브릿지 스트림의 특성도 갖고 있다)


				사용예1]

				BufferedReader br = new BufferedReader(new InputStreamReader(System.in));//키보드로 입력받은 것을(1바이트)
                                                                                               //2바이트로 변환(InputStreamReader)하고 필터링(BufferedReader)

				BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));//콘솔에 출력하는데 2바이트로 변환하고
                                                                                                         //필터링
				String data=null;
				data =br.readLine();
				while((data =br.readLine())!=null){


					bw.write(data);//data가 스트링형임으로 문자열 관련 함수를 이용하기 편함
					bw.newLine();//bw.write(data+"\n")도 같은 효과
					bw.flush();


				}

		
				br.close();
				bw.close();

				사용예2]

				BufferedReader br = new BufferedReader(new FileReader("원본텍스트파일"));//파일로 입력받은 것을(2바이트)
                                                                                          //필터링(BufferedReader)

				BufferedWriter bw = new BufferedWriter(new FileWriter("대상 텍스트파일"));//파일로 출력하는데 필터링
				String data=null;
				data =br.readLine();
				while((data =br.readLine())!=null){


					bw.write(data);
					bw.newLine();
					bw.flush();


				}

		
				br.close();
				bw.close();
						



				

				PrintWriter :
											 
						- 생성자의 두번째 인자로 true값을 주면 autoflushong이 일어난다.
						- PrintStream 클래스의 모든 print계열 메서드를 구현했다. 
						  즉 BufferdWriter는 줄바꿈을 지원 안해서
						  newLine()메서드를 사용하지만 println()메서드를 사용해서 줄바꿈을 한다.

					

				




[File 클래스]
	
	- java.io패키지에 있는 클래스
	- 파일과 디렉토리에 관련 된 작업에 필요한 클래스
	  
	  주요 메서드]
		  -String getName():파일명 혹은 디렉토리의 이름 얻어 오는 메서드
		  -String getPath():파일 혹은 디렉토리의 상대경로
		  -String getAbsolutePath(): 파일 혹은 디렉토리의 절대 경로
			예] src\\test.txt  - 상대경로:src\test.txt 
			                     절대경로:d:\java\javaProj\src\test.txt

			    d:\java\javaProj\src\test.txt - 상대경로:d:\java\javaProj\src\test.txt
							    절대경로:d:\java\javaProj\src\test.txt

		  -long length():파일의 크기(바이트),디렉토리는 크기는 0 반환
		                                     또한 존재하지 않은 파일도 0 반환
		  -String getParent():상위 부모의 경로,File개체 생성시 
		                      상위 부모명이 주어지지 않으면 null반환

				      상위 디렉토리 얻어 올때 File클래스의
				      생성자 중 File(String parent, String child) 를 사용하면
				      parent매개변수에 지정한 값을 무조건 얻어 온다
				      그러나 File(String pathname) 를 사용해서 File객체 생성시
				      getParent()메소드는 null을 반환한다.
				      단, 절대경로로 디렉토리를 넣어주면 해당 
				      상위 디렉토리를 얻어온다
		예] d:\\java\\javaProj\\src\\test.txt - d:\java\javaProj\src
		    d:\\java\\javaProj\\src  -  d:\\java\\javaProj
		  
		  -boolean isFile():파일이면 true 아니면 false
		  -boolean isDirectory();디렉토리면 true,아니면 false
				isFile():파일이 존재하지 않거나 파일이 아닌 경우 false
				isDirectory():디렉토리가 존재하지 않거나 디렉토리가 아닌 경우 false

		  -boolean exists():디렉토리 혹은 파일이 존재 하면 true 아니면 false
		  -boolean delete():디렉토리 혹은 파일삭제 성공시 true 실패하면 false
		            만약 디렉토리인 경우 디렉토리가 비어 있어야 한다.
		  -boolean canRead():읽기 가능하면 true 아니면 false
		  -boolean canWrite():쓰기 가능하면 true,아니면 false

		  -long lastModified()  :파일이나 디렉토리가 최근 수정된 날짜를
		                         1970년 1월 1일 0시0분0초부터
					 현재까지 흘러온 시간을 1000분의 1초 단위로
					 반환

		  -boolean mkdir():디렉토리 생성
		  (부모 디렉토리가 있어야 함, 
		  아니면 자식 디렉토리값만 File 생성자의 인자로 주어야 한다)
		  예] new File("src/tmp") 혹은 new File("tmp")
		  -boolean mkdirs():부모 디렉토리가 없더라도 부모 디렉토리까지 생성
		  -boolean ranameTo(File dest):파일 이름 변경 성공하면 true,아니면 false 
		  -String[] list() :디렉토리에 있는 파일 및 디렉토리 목록 반환
		  - File[] listFiles() :디렉토리에 있는 파일 및 디렉토리 목록 반환(File개체 로 반환) 



[주요 스트림 분류표]

========================================================================================================================================
		 구 분     |                 바이트 스트림(1byte)               |                문자 스트림(2byte)
===========================+========================+===========================+==========================+===========================
			   |                        |                           |                          |
       추상 클리스         |   InputStream          |   OutputStream            |       Reader             |      Writer
                           |                        |                           |                          |
-------------------------- +------------------------+---------------------------+--------------------------+---------------------------- 
			   |                        |                           |                          |
	   Node Stream     |   FileInputStream      |    FileOutputStream       |       FileReader         |      FileWriter
                           |                        |                           |                          |
---------------------------+------------------------+---------------------------+--------------------------+----------------------------
			                                                        |		           |
	   Bridge Stream							|	InputStreamReader  |      OutputStreamWriter
										|                          |
---------------------------+------------------------+---------------------------+--------------------------+-----------------------------
	                   |                        |                           |                          |
	   Filter Stream   |   DataInputStream      |     DataOutputStream      |       BufferedReader     |       BufferedWriter
                           |                        |                           |                          |
	                   |   BufferedInputStream  |     BufferedOutputStream  |                          |       PrintWriter
                           |                        |                           |                          |
			   |   ObjectInputStream    |     ObjectOutput stream   |                          |
===========================+========================+===========================+==========================+=============================




