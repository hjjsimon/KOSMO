package abstraction06;


/*
 * 티오베 인덱스: 언어 인기순위대로 나옴
 * 
 * OOP언어, 대표적인 오리지널 객체지향언어(OOP) 3개: 자바, C++, C#/ 자바가 어려운편이라 C++, C# 할 수 있음, 자바는 오픈소스라 해야될게 많음
 * 
 * C언어(어려움)는 시스템제어가 가능, 파이썬 자바는 불가, 코로나때 올라옴
 * 
 * 파이썬은 객체지향언어에 함수형프로그램 2가지 특징 지님, 자바 90년대 초반, 머신러닝 나오면서 파이썬(자바보다 오래됨)이 뜬것,
 * 
 * 객체화 시킨다? ex. 자동차(인간세계의 사물) 관리 시스템 등에서 프로그램을 짜서 자동차를 관리하려함, 프로그램의 대상인 자동차를 객체(오브젝트)라고 함
 * 객체의 특징이 있음, 객체는 행동+속성(성질) 2가지를 가짐
 * 자동차라는 객체는 주행한다,시동건다 등 '행동' + 색상, 기어, 이름 등 '속성' -> 이걸 프로그래밍하려면 어떻게 할까
 * 자동차를 객체로 만들어서 행동은 메소드로 만듦 / 속성은 변수로 만듦 -> 이런게 객체지향프로그래밍 
 * 
 * [객체지향 프로그래밍(OOP:Object Oriented Programming]
	
	
	 1]OOP란? 
	        인간의 현실세계를 정보화 시스템으로 반영하기 위해 
		모든 개념(사물,현상,사건)등을
		객체화 시켜 프로그램에 반영 하는 것
	
	 2]객체(Object) : 유무형의 물체,현상,사건등을 의미.
	          
	 3]object의 특징: 객체는 속성과 행위를 갖는다.
			  속성은 변수로 행위는 함수로 구성한다 이를 객체 모델링 이라 함            -> 모델링~~ 
			  객체지향 프로그래밍에서는 변수를 멤버변수(속성)로 함수를 메소드라 부른다    -> 메소드~~~/ 멤버변수 또는 "필드" 라고도 함
	
	 4]OOP 프로그래밍의  순서
		1.프로그램에 필요한 객체를 뽑아냄
		2.객체 모델링
		3.클래스 구성
		4.객체 생성 및 사용
	
	5]OOP의 주요 특징
	
	        1. 추상화
	        2. 캡슐화
	        3. 다형성
	        4. 상속성

 * 
 * 비디오 관리 프로그램 좀 짜달라고함
 * 관리해야할 대상? 비디오, 고객 등등 -> 이런게 각각 객체임
 * 비디오라는 객체를 뽑아내서 행동과 속성을 뽑아냄 (비디오 가게의 상황에 맞는) -> 행동: 재생 / 속성: 장르, 감독, 제작사, 상영시간, 대여비 등
 * 고객이라는 객체 마찬가지 -> 행동: 대여하다, 반납한다 / 속성: 이름, 연락처, 주소, 나이
 * -----------지금까지한게 객체 뽑아낸 후 객체 모델링까지 완료
 * 
 * 접근지정자 지정자 클래스 클래스명 -> 안에 메소드랑 변수 만들면 끝, 이게 객체의 설계도라고 할 수 있음
 * 
 * ex. 자동차 만들려면 설계도 하나로 계속 찍어냄, 마찬가지로 class는 객체의 설계도, 이걸로 계속 객체를 찍어낼 수 있음.
 * 메모리에 생성된게 만들어진 자동차!(현실에서 설계완료된 개념)
 * 메모리에 올라온게 객체!
 * ex. new int[3] -> heap영역에 방3칸 생긴게 객체임 -> new 써서 클래스가 메모리에 만들어진게 객체
 * 
 * 여러 클래스가 모여 프로그램이 됨
 * 
 * -객체는 RAM에 생성된 메모리에 생성된 것   
 *       
 * 1. class는 객체의 설계도다!!!!!!!!!!!
 * 2. class는 내가 만든 자료형이다!!!!!!!!!! -> 어떤 데이터를 저장할 수 있는 데이터타입!
 * 배열은 한가지 타입만 저장가능, 클래스는 여러가지 타입도 저장 가능함 int, char 등등 다양하게 가능(여러타입의 데이터를 저장가능)
 * 딱 2개만 기억해라
 * 
 * 설계도 -> 아파트
 * class -> 객체          똑같은 개념
 * 
 * cf. int a; 는 참조형이 아니라 a메모리를 객체라고는 안함 -> 배열 돼야 객체!
 * 
 * 객체모델링을 통해서 행동, 속성 뽑아냄 -> 클래스로 행동은 메소드, 속성은 변수로 만드는게 추상화(특징만 잡는게 추상화, 비디오에 맞는 특징만 뽑아옴 고객 밥도 먹는데 관심x, 대여가 관심)
 * 
 * 클래스를 만드는게 추상화
 * 
 * [추상화(Abstraction)]

 어떤 물체(object)에서 주된 특징을 부각시켜 표현하고,
 나머지 부분은 과감하게 생략하는 것
 OOP에서 사용되는 추상화도 이와 비슷하다.
 한 물체를 대표하는 속성(명사)과 행위(동사)를 
 추출해내는 것을 프로그래밍에서는 추상화 라고 한다.



	[1 클래스의 정의]


		클래스란: 인간 세계의 객체를 추상화 한것
		즉 객체의 설계도라 할 수 있다

		-클래스도 하나의 자료구조다.즉 데이타 타입이다

		선언]

		*클래스의 멤버로는 멤버변수와 메서드등을 갖는다                       
----------------------------------------------------------------------------여기 아래가 설계도 = 클래스
		접근지정자 [modifier] class 클래스명{//클래스명은 대문자로 시작

			접근지정자 자료형 멤버변수명; -> 필도라고도함
			접근지정자 반환형 메서드

		}
 * 
 * [2  객체 생성 및 멤버접근방법]


	클래스명 인스턴스변수 = new 생성자(); ----------------->클래스명 int 이런거, 메모리에 생성자 생김 이게 객체, 인스턴스변수에는 주소가 저장됨

	*클래스 멤버 접근 방법

	인스턴스형메버(instance)에는 인스턴스변수.멤버로 접근
	정적멤버(static)에는 클래스명.멤버로 접근

	

	 -멤버변수는 크게 정적멤버 변수와 인스턴스형 멤버변수로 나눈다
	 -멤버메소드도 정적메소드 와 인스턴스형 메소드로 나눈다.
	  
	 -멤버변수나 멤버 메소드 앞에 static이라는 modifier가 붙으면
	   정적 멤버 즉 정적 멤버변수이거나 정적 메소드이다.
	  
	   예] int age;//인스턴스형 멤버변수
	       static int age;//정적 멤버변수
	       
	       public void method(){};//인스턴스형 메소드
	       public static void method(){};//정적 메소드
	       
	       단,class앞에는 static을 붙일 수 없다
	 
 * 
 * 
 * 
 * 
 */


		/*
		[클래스 정의]
		- 클래스명은 항상 대문자로 시작하자
		- 클래스는 객체(Object)의 설계도
		- 클래스는 여러 타입의 값을 저장 할 수 있는 자료형이다(자료구조다)              -> 배열은 한개 고정! 그거보다 좋음!
		    즉 사용자 정의 자료형(데이타 타입)이다                                -> 그냥 내가 만든 자료형이다~~
		- 인간 세계의 객체(사물,사건 ,개념,현상)에서 속성(성질,상태)과 행동을 뽑아내서    -> 객체 모델링 
		   속성은 변수나 상수로 행동은 메서드로 뽑아내
		   클래스를 정의하는것을 추상화라한다.
		
		[클래스 정의 구문]
		
		접근지정자 [modifier(지정자)] class 클래스명{            -> 지정자 [대괄호] 생략가능하다는 뜻
				 	//클래스의 멤버들                  -> 클래스의 멤버라서 멤버라고 이름 붙임
				 	멤버 상수
				 	멤버 변수
				 	멤버 메서드
				        클래스(내부 클래스)           -> 클래스 안에 클래스 가능
				        인터페이스                  
				 
		}
		
		속성[멤버변수 혹은 필드]
		멤버변수는 해당 클래스와 has a 관계가 존재해야 한다.                      
		멤버변수는 초기화를 하지 않으면 해당 자료형으로 초기화가 된다.     -> 배열과 동일
		예] 참조형:null,int:0 ,double:0.0 ,boolean:false 등
		멤버변수는 해당 클래스안의 모든 메소드에서 사용이 가능하다        -> 클래스 안에 멤버 상수 멤버 변수 등 만듦, 멤버 메서드 내에서 멤버 상수, 변수 쓸 수 있다는 뜻
		
		지금은 person 클래스 
		ex. String name; -> 사람은 누구나 이름 속성 가짐, person클래스는 이름 속성 가짐 
		ex. String wheel; -> 바퀴는 자동차가 가지고있음, person has a wheel [x] 안됨, has a 관계 중요 필수!
		
		
		
		
		멤버변수 선언]
		접근지정자 [modifier] 자료형 멤버변수명;
		※멤버변수는 모든 데이타 타입
		(기본 데이타 타입/배열/클래스등)을 사용할 수 있다      -> 위의 멤버변수명; 왼쪽의 자료형에 기본데이터, 배열, 클래스(얘도 자료형이라고!!) 다 가능~
		
		
		단,지역변수 선언시에는  [modifier] 자료형 변수명;
*/


// 사람을 추상화 해보자
// 즉, 사람의 설계도(클래스)를 만들어보자
// 즉, 사람의 행동과 속성 뽑아내서 행동은 메소드로 속성은 상수나 멤버변수로



public class Person { // person이라는 클래스에 필드 3개 메소드 4개 
	// 클래스 1개에 .java 1개가 원칙, 파일 안만들었는데 클래스 만드니까 .java 파일 만들어짐, 클래스는 bin에 가면 .class로 만들어져있음 

	//1]사람이라는 객체가 갖고있는 속성(성질이나 상태): 멤버변수 혹은 필드(has a 관계) 
	//이름, 나이, 무게 저장 가능함->같은 타입 저장하는 배열보다 나음 다양한 데이터타입 저장가능한 자료형, 그냥 person은 자료형이다!! int타입처럼 person 타입이라고함!
	public String name; //이름 속성 -public 접근지정자 사용
	int age=1; //나이 속성 -생략형(패키지) 접근지정자 사용, 선언과 동시에 초기화, 여기도 앞에 접근지정자 있는데 생략함, 생략형 접근지정자라고함
	double weight; //몸무게 속성 -생략형 접근지정자 사용
	////필드는 여기까지만 만들자
	
	//[멤버 메소드 정의] -> 사람의 행동을 메소드로 정의
	//사람이라는 객체가 갖고있는 행동(행위): 멤버 메소드
	void sleep() {
		System.out.println(name+"가(이) 자다");  // 자료형 뭐든지 들어가도 됨
	}
	void eat() {
		System.out.printf("나이가 %d살인 %s가(이) 먹다%n그래서 몸무게가 %.2fKG이다%n",age,name,weight);
	}
	
	//프로그램의 효율성을 위한 메소드들] 위에 저장된 값을 쓸거라 반환필요x(??라고함)
	String getPerson() {
		return "["+name+"의 정보]\r\n나이:"+age+"\r\n몸무게:"+weight;
	}
	void printPerson() {
		System.out.println(getPerson()); // 메소드 그대로 출력-> 위의 문자열을 출력할것
	}
	// main이 없어서 run as(컨트롤 f11) 안됨
	// 사람이라는 설계도만듦, 사람이라는 객체를 찍어내야함, 눈에는 안보이고, 컴퓨터 램에 new하면 메모리가 생성됨
	
	
	
	
	
	
}///////////class
