package operator02;

public class NolliOP {

	public static void main(String[] args) {
		
		/*
		  -논리연산자(이항연산자 혹은 단항 연산자)의 결과값은 true,false이다. / 논리연산자는 4개 있음, 단항이 이항보다 우선순위, 논리니까 결과는 t or f
		 
		  1) &&: and연산자(논리곱) 두 항이 참일때만 참이다
		   (~그리고 로 해석함, 그래서 and 연산자라고 함)		
		     ex. 3>2 && 5>3 -> 3은 2보다 크고, 5는 3보다 크다 -> true, 두 항 모두 참
		     ex. 3>2 && 5>10 -> 3은 2보다 크고, 5는 10보다 크다 -> 하나 t 하나 f 니까 결과 f
		  
		  2) ||: or연산자(논리합) 두 항 중의 하나라도 참이면 참(~또는 ,혹은)
		    (~혹은, 거나로 읽음)
		  	ex. 3>2 || 5>10 -> 둘 중 하나가 참이니까 참		  	
		  	
		  3) !(단항연산자): not연산자(논리부정) 단항이 참이면 거짓, 거짓이면 참(~아니다) -> 그냥 부정하는 것		 
		  	ex. !(3>2) -> 3은 2보다 큰게 아니다 라는 뜻, t가 아니니까 f가 답
		  	// 보기좋게 괄호로 감싸도 됨, 어차피 단항이라 우선순위(이해못함-> 밑에 나옴)
		  			  
		  4) ^(이항연산자): xor연산자(배타) 두 항이 서로 다를 때(배타적) 참, 잘 쓰면 편함
		                 두 항이 서로 같으면 거짓
		 	ex. 3>2^5>3 -> t랑 t임 둘이 같으니까 결과가 거짓, 둘이 t f로 다르면 배타적인것 결과가 true로 나옴
		 	// 두 항이 서로 다를 때만 참
		 
		 -논리연산자의 우선 순위: ! > && > ||,^		 -> !는 단항이니까 우선순위 높음, 이항연산자 중에서는 &&가 우선, ^는 xor 계열이라 or 친구임 동급
		 -&& 와 &,|| 와 | 는 둘다 결과값이 같다		 -> 1개로 써도 되는데, 1개는 컴퓨터한테 일을 더 시켜서 안좋음 쓰면 안됨
		 
		 	ex. 3>5&&5>3 앞에 f니까 무조건 둘다 t 불가, 결과는 f // 근데 &한개만 쓰면 컴퓨터가 뒤에도 계산함. &&쓰면 앞에 f만보고 계산 f로 끝내버림.
		 
		 -&&는 첫째항이 거짓이면 두번째항은 계산안한다
		 -&는 첫째항이 거짓이더라도 두번째항을 계산한다		 
		 -산술 > 비교 >논리연산자순으로 우선순위가 적용됨. -> 산에 비가오면 논에 물이 많이 차요, 산비논 암기
		  
		 */
		
		int num1=15, num2=10;
		boolean b= num1 >= num2 && num1 == num2;   // 논리 vs 비교 -> 비교연산자 먼저 // >=왼쪽부터하면 t, ==하면 f, &&하면 f 최종값 -> b에 f들어감
		// 최종 논리식으로 결과가 나오므로 논리식이라고함, 산비논 역순일듯
		System.out.printf("%d >= %d && %d == %d의 결과:%b%n", num1, num2, num1, num2, b);

		b= true|| false; // 하나라도 참이면 참
		System.out.printf("%b|| %b의 결과: %b%n", true, false, b); // t f는 순서대로 넣고, 세번째 %b는 b 넣음
		
		//b= num1+ num2&& num1!= num2; // 25&& true 결과로 나옴, 논리연산자 양옆에는 t나 f만 가능, 25 숫자 나오면 에러남, 파이썬이나 자바스크립트는 25를 t 취급함.
		// 논리연산자(&&,||,!,^)의 각 항에는 반드시 t나 f값을 갖는 식(비교식)이거나 t,f값이어야한다
		
		b= num1<= num2^ num1!= num2; // f랑 t로 다르니까 배타적 t 최종
		System.out.printf("%d<= %d^ %d!= %d의 결과: %b%n", num1, num2, num1, num2, b);

		b= !(num1 != num2) || num1 >= num2 && num1 == num2;  // !옆에 t나 f 와야하는데 num1만 오면 안됨. 괄호처리해줌
		//t가 아니니까 f(단항 우선),   t               f
		//         f       ||              f                -> 오른쪽 먼저 &&가 ||보다 우선, 그리고 참이 하나도 없으니 최종 f
		System.out.println("b는 "+b);
		
		
		b= 10 % 3 > 6-2*2 && 10 < 6*2 || 5*3 !=10;  // 산비논 다 섞임
		//    1        4           12     15    	
		//           2             12     15      	 -> 산술끝	
		//        f             t             t      -> 비교끝
		//                f           
		//                            t              -> 논술 끝, t 최종
		System.out.println("b는 "+b);
		
		b = !true || true ^ false && true;
		//    f             
		//                        f
		//        t 
		//                t
		System.out.println("b는 "+b);
		
		// &&와 &, ||와 |의 차이
		
		// ---------------------------아래 모르겠음
		/*
		Ref ref= new Ref();
		System.out.println(ref.data); //[o] 100출력 -> data 뒤에 ==100 하면 data에 100저장했으니까 true 나옴
		*/

		Ref ref = null; // null 키워드임 "" 없으니 문자열 아님, 그냥 null이라는 값
		//System.out.println(ref.data==100);  // [x] 에러남, 컴파일은 되는데 실행(런타임) 오류가 발생, 위에는 잘 됐는데, java.lang.NullPointerException
												// ==100해도 null 포인트 익셉션 나옴
		System.out.println(ref);
		
		System.out.println(ref != null && ref.data==100); // ref는 null임, 근데 null이 아니다? false 나옴
		
		// 지금 && 앞에 f 나와서 뒤에 에러인데도 바로 f가 결과로 나온것, ref.data==100이 에러문장인데도 그냥 연산 안한것
		// System.out.println(ref != null & ref.data==100); // 이건 오른쪽 연산을 실행해서 에러남
		
		
		
	}//////// main

}/////////////// class 


	// NollOP".java"안에는 클래스 하나만 있어야함, 밑에는 연습이니까

class Ref{
	int data=100;         // data에 100저장 그리고 위 내용
	
}


