# ※ set는 중복을 허용하지 않는다
# 순서가 없기 때문에 출력시 순서없이 출력된다.
# 단, 숫자로만 이루어진 세트는 오름차순으로 출력된다
print("[집합 생성 첫번째: 빈 집합]")
a = {} # 빈 딕셔너리, 집합 아님
print('value: {}, type: {}' .format(a, type(a))) # value: {}, type: <class 'dict'>

a = set() # 생성자 함수로만 만들 수 있다
print('value: {}, type: {}' .format(a, type(a))) # value: set(), type: <class 'set'>

print('[집합 생성 두번째: {요소1, 요소2,...}]')
a = {4,10,282,3.14,5,20}
print(a) # 오름차순으로 출력
a = {'4','10','282','3.14','5','20'}
print(a) # 순서없이 출력

print('[집합 생성 세번째: set() - 리스트나 튜플을 집합으로 변환(중복요소 제거됨)]')
a = 1,2,3,4,5 # 튜플은 괄호 생략 가능
# a = set(1,2,3,4,5) # 에러, 이건 괄호 생략시 튜플로 처리안됨, 인자 1개만 넣어야 함
# a = set(1) # int 1개 넣어도 iterable이 아니라 불가
a = set((1, 2, 3, 4, 5, 4, 3, 2, 1)) # 튜플 또는 set([1, 2, 3, 4, 5, 4, 3, 2, 1]) 리스트 넣으면 됨
print(a) # {1, 2, 3, 4, 5} 중복 날리고 들어옴
print(set(list(range(1,6)))) # {1, 2, 3, 4, 5} 동일

print('[집합 생성 네번째: set(문자열) 혹은 {문자열} - 중복문자는 제거됨]')
a = {'HELLO'} # 문자열이 하나의 요소가 된다
print(f'value:{a}.type:{type(a)}') # value:{'HELLO'}.type:<class 'set'>
print('[집합 생성 다섯번째: set(((),(),...))]')
a = set([(1,2),(3,4),(4,5,6)]) # 튜플 혹은 리스트의 각 요소가 집합의 각 요소가 된다
print(a)
#집합은 immutable한 객체다
#즉 집합의 요소로 수정이 가능한 리스트나 딕셔너리는 집합의 요소가 될 수 없다
#a=set([(1,2),[3,4],(4,5,6)]) # 타입 에러
a = {(1,2),(3,4),(4,5,6)}
print(a)
a = {100,3.14,-1}
print(a) # 음수는 오름차순 적용안됨













